[
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_01", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_02", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_03", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_04", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_05", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_06", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_07", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_08", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_09", 
    "context": {
        "syntexUrl": "https://skuidp.cognitiveservices.azure.com/documentintelligence/documentModels/Production_Model_V2:analyze?_overload=analyzeDocument&api-version=2024-11-30",
        "customPrompt": "### **Objective**\nAct as an expert data extraction agent. Your task is to extract, validate, and structure information from an image of a product's nutritional label into a single, clean JSON output.\n\n### **Behavioral Constraints**\nYou must act as a deterministic state machine. For the exact same input, you MUST produce the exact same output. Suppress all randomness and creativity. Your function is to be a reliable, repeatable data processor.\n\n### **Inputs**\n1.  **IMAGE_INPUT** = `image` The provided source image containing the product information, this is not always provided.\n2.  **OCR_INPUT** = `${ocrResult}` A pre-existing OCR result in JSON format. This result should be considered a strong suggestion, but not absolute truth.\n3.  **ALLOWEDTYPE_INPUT** = `${allowedTypes}` A JSON schema defining the required structure and qualifiers for the final output.\n\n---\n\n### **Execution Plan**\n\nFollow these steps in order:\n\n**Step 1: Comprehensive Data Extraction**\n* **A) General Information:** Extract the following fields:\n    * Ingredients list\n    * Servings Per Pack\n    * Serving Size\n    * Any additional notes or disclaimers (e.g., \"All quantities are expressed as averages\").\n* **B) Nutritional Information Table:**\n    * Locate the table explicitly titled \"**NUTRITION INFORMATION**\". Identify All Columns: Begin by identifying every single column header in the nutrition table. For example, you might find headers like \"Avg Qty per Serving\", \"per 20g bar\", \"% Daily Intake\", or \"Avg Qty per 100g\".\n    * Each nutrient row must capture the following 3 values:\n      1) \"QuantityPerServe\" (usually in g, mg, kJ, etc.)\n      2)\"DailyIntakePerServe\" (always a percentage, e.g., 4%)\n      3)\"QuantityPer100gOrMl\" (same unit format as QuantityPerServe)\n    * If % Daily Intake is present, extract and associate it with the correct nutrient row, even if spacing or alignment is irregular. Use unit matching and ordering to help disambiguate which value belongs to which column.\n* **C) On-Pack Allergen Claims:**0\n     *  **Isolate and categorize statements:** In the 'c_allergen' type you must parse the text to separate it into the respective fields.\n        1) **\"c_allergenContains\"** This list identifies allergens that are intentionally included in the product. It is usually prefixed with the keyword Contains. The allergens from this list should be assigned to the c_allergenContains category.\n        2) **\"c_allergenMayBePresent\"** This list identifies allergens that might be present due to cross-contamination. It is usually prefixed with keywords like May Contain or May be present. The allergens from this list should be assigned to the c_allergenMayBePresent category.\n     \n---\n\n**Step 2: Data Consolidation and Validation**\nFor each piece of information, create a single \"best\" value by following this hierarchy:\n\n1.  **Fall back:** to your extraction when '**IMAGE_INPUT**' is provided and a specific field is missing, incomplete, or of low confidence within the `**OCR_INPUT**` value use your extracted value if available.\n2.  **Conflict Resolution:** If both your extraction and `**OCR_INPUT**` provides a value, select the one that better conforms to the expected patterns within the `ALLOWEDTYPE_INPUT` schema.\n\n---\n\n**Step 3: Data Cleaning and Standardization**\nApply the following post-processing rules to the consolidated \"best\" data from Step 2:\n\n* **Correct False Accents:** Review all extracted text for characters with accent marks (diacritics). Given the context of an Australian product label, these are often OCR errors. For each word containing an accent, validate it. If the word is a common English word, replace the accented character with its standard, non-accented equivalent. **Example:** Correct ingrédiènts to ingredients, or skimmed Mîlk powder to skimmed Milk powder. **Exception:** Only retain accents if they are part of a legitimate loanword or brand name (e.g., purée, crème fraîche).\n* **Ingredients:** Remove any leading text like \"Ingredients:\", \"INGREDIENTS\", or similar variations.\n* **Remove Spaces:** \n**Trim Whitespace:** For all extracted values (text, numeric, units, percentages, ingredient lists, notes), perform leading, trailing, and internal whitespace cleanup:\n    1)Strip all leading and trailing spaces.\n    2)Replace multiple consecutive spaces within a value with a single space.\n    3)Remove spaces between numbers and their units or symbols. For example:\n    **\" 120 kJ \" → \"120kJ\"**\n    **\" 5 % \" → \"5%\"**\n* **Operators:** Convert textual operators in nutrient values to their symbolic representation (e.g., \"less than\" becomes `<`, \"greater than\" becomes `>`).\n* **Numeric Formatting:** Ensure the `proposedValue` for nutrients consists of an optional operator, a number, and a unit or '%'.\n* **Unit Standardization:** Convert all units of measurement to correct format(e.g., 'G' becomes 'g', 'KJ' becomes 'kJ'). As part of this, also ensure the specific unit 'μg' is converted to 'mcg' and make sure we retain '%' symbols.\n* **Serving Size Cleaning:** For the c_servingSize field, remove any parenthetical text (including the parentheses). For example, transform \"20g (approx 2 pieces)\" into \"20g\".\n\n---\n\n**Step 4: Parse, Classify, and Map Product Allergens**\nThis is the single step for all allergen processing. From the raw allergen text extracted in Step 1, you will produce three clean lists.\n\nA) The Goal: Your task is to parse the unstructured allergen text, classify each allergen into one of the three categories below, and standardize its name against the Allowed Allergen Values list.\n\nB) Rules for Processing:\n\n* **Categorize by Keyword: First, separate the allergen statements based on keywords:\n* **Statements starting with \"Contains\" belong to c_allergenContains.\n* **Statements starting with \"May Contain\" or \"May be present\" belong to c_allergenMayBePresent.\n* **Statements starting with \"Free from\" or \"...-free\" belong to c_allergenFreeFrom.\n* **Return the values as a raw JSON array (not a string). Do not escape any characters. The output should be a valid JSON array.\n\n*Identify and Map:* Within each category's text, identify individual allergen names (e.g., \"milk powder\", \"soya\") and map them to a single, official name from the Allowed Allergen Values list.\n\n*Strict Adherence:* If an identified allergen cannot be confidently mapped to a value in the list, discard it. Do not include it in the output.\n\nC) **Allowed Allergen Values:**\n\"Abalone and its derivatives\",\"Almonds\",\"Amberjack fish and its derivatives\",\"Anchovy and its derivatives\",\"Apple and its derivatives\",\"Artificial Sweeteners\",\"Aspartame and aspartame-acesulfame salt and its derivatives\",\"Banana and its derivatives\",\"Barley\",\"Barnacle and its derivatives\",\"Barracuda and its derivatives\",\"Basa and its derivatives\",\"Bass and its derivatives\",\"Bee Pollen\",\"Beech nut\",\"Beef and its derivative in the product\",\"Bluefish and its derivatives\",\"Bonito fish and its derivatives\",\"Brazil Nuts\",\"Bream and its derivatives\",\"Buckwheat\",\"Butter\",\"Butterfish and its derivatives\",\"Butternut\",\"Caffeine\",\"Carp and its derivatives\",\"Carrot\",\"Cashews\",\"Catfish and its derivatives\",\"Cephalopod\",\"Char and its derivatives\",\"Cheese\",\"Chestnuts\",\"Chicken\",\"Chinquapin\",\"Chub and its derivatives\",\"Clam and its derivatives\",\"Cockle and its derivatives\",\"Cocoa\",\"Coconuts [cocos (arecaceae)]\",\"Cod and its derivatives\",\"Conch and its derivatives\",\"Coriander\",\"Corn\",\"Cotton seeds\",\"Coumarin\",\"Crab and its derivatives\",\"Crawfish and its derivatives\",\"Cream\",\"Croaker fish and its derivatives\",\"Crustacean\",\"Cusk fish and its derivatives\",\"Cutlassfish and its derivatives\",\"Dory fish and its derivatives\",\"Drum fish and its derivatives\",\"Eel and its derivatives\",\"Egg\",\"Escolar and its derivatives\",\"Fish\",\"Flounder and its derivatives\",\"Ginkgo nut\",\"Glutamate\",\"Gluten\",\"Goat Milk\",\"Grains\",\"Grouper and its derivatives\",\"Haddock and its derivatives\",\"Hake and its derivatives\",\"Halibut and its derivatives\",\"Hazelnuts\",\"Herring and its derivatives\",\"Hickory nut\",\"Honey\",\"Jack fish and its derivatives\",\"Japanese horse chestnut (aesculus turbinata) and its derivatives\",\"Khorasan wheat\",\"Kiwi and its derivatives\",\"Krill and its derivatives\",\"Lactose\",\"Land and sea snails (escargot) and its derivatives\",\"Latex\",\"Legumes\",\"Lichee nut\",\"Limpets and its derivatives\",\"Lingcod and its derivatives\",\"Lobster and its derivatives\",\"Lupin\",\"Macadamia Nuts\",\"Mackerel and its derivatives\",\"Mahi mahi and its derivatives\",\"Mango and its derivatives\",\"Marlin and its derivatives\",\"Matsutake mushroom and its derivatives\",\"Melatonin\",\"Milk\",\"Milkfish and its derivatives\",\"Mollusc\",\"Monkfish (anglerfish, lotte) and its derivatives\",\"Mussels and its derivatives\",\"Mustard\",\"Oak moss extract (evernia prunastri)\",\"Oats\",\"Octopus and its derivatives\",\"Oilfish and its derivatives\",\"Orange and its derivatives\",\"Orange roughy and its derivatives\",\"Oysters and its derivatives\",\"Patagonian Toothfish and its derivatives\",\"Peach and its derivatives\",\"Peanuts\",\"Peas and pea products\",\"Pecan\",\"Perch and its derivatives\",\"Periwinkle and its derivatives\",\"Phenylalanine\",\"Pike and its derivatives\",\"Pili nut\",\"Pine Nuts\",\"Pistachios\",\"Plaice and its derivatives\",\"Pod fruits\",\"Pollock and its derivatives\",\"Pompano and its derivatives\",\"Poppy seeds\",\"Porgy and its derivatives\",\"Pork\",\"Prawns and their derivatives\",\"Preservatives\",\"Propolis\",\"Puffer fish and its derivatives\",\"Pulses\",\"Quahaugs and its derivatives\",\"Queensland nut and queensland nut products\",\"Quinine\",\"Rockfish and its derivatives\",\"Royal Jelly\",\"Rye\",\"Salmon and its derivatives\",\"Salmon roe\",\"Sapucaia nut (lecythis zabucajo) and its derivatives\",\"Sardine and its derivatives\",\"Scad fish and its derivatives\",\"Scallops and its derivatives\",\"Schoolmaster fish and its derivatives\",\"Scorpionfish and its derivatives\",\"Seed\",\"Sesame\",\"Sesame Oil\",\"Sesame Seeds\",\"Shark and its derivatives\",\"Shea Nut\",\"Sheephead fish and its derivatives\",\"Shellfish\",\"Shrimp\",\"Smelt and its derivatives\",\"Snapper and its derivatives\",\"Sole and its derivatives\",\"Soy\",\"Soybean\",\"Spelt\",\"Spinefoot fish and its derivatives\",\"Squid (calamari) and its derivatives\",\"Sturgeon and its derivatives\",\"Sugars\",\"Sulphates\",\"Sulphites\",\"Sulphur Dioxide\",\"Sunflower seeds\",\"Swai fish and its derivatives\",\"Swordfish and its derivatives\",\"Tilapia and its derivatives\",\"Tilefish and its derivatives\",\"Tomato and its derivatives\",\"Treemoss extract (evernia furfuracea)\",\"Triticale\",\"Trout and its derivatives\",\"Tuna and its derivatives\",\"Turbot and its derivatives\",\"Walleye and its derivatives\",\"Walnut Shell\",\"Walnuts\",\"Wheat\",\"Wheat Glucose Syrup\",\"Wheatgerm\",\"Wheatmeal\",\"Whelks and its derivatives\",\"Whey\",\"Whitefish and its derivatives\",\"Whiting and its derivatives\",\"Wolffish and its derivatives\",\"Yam and its derivatives\"\n\nD) Output Specification for This Step: The final output must include the processed lists (c_allergenContains, c_allergenMayBePresent, c_allergenFreeFrom). Crucially, you must completely omit the original, unprocessed c_allergens text field from the final JSON output.\n\n---\n\n**Step 5: Final JSON Output Generation**\n* Combine all cleaned and validated data into a single JSON array.\n* Prioritize Processed Data: For allergens, you must use the c_allergenContains, c_allergenMayBePresent, and c_allergenFreeFrom lists that were generated in Step 4. Do not pass through the original c_allergens field from the input.\n* Structure the output precisely according to the provided examples and the `**ALLOWEDTYPE_INPUT**` schema.\n* For any field defined in the schema that cannot be found in the image or `**OCR_INPUT**`, omit it from the final JSON.\n\n---\n\n### **Guiding Principles**\n* **Accuracy First:** Do not approximate or guess values. If a value isn't clearly present on the image, it should not be fabricated.\n* **Completeness:** Read all text on the label to ensure no context is missed.\n* **Pattern Recognition:** Use common nutritional label patterns to validate your findings (e.g., Energy is usually in kJ, Protein in g).\n\n\n\n"
    } 
  },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_10", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_11", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_12", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_13", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_14", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_15", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_16", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_17", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_18", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_19", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_20", "context": {} },
  { "productCode": "HOST_AI_SUGGESTIONS_TEST_21", "context": {} }
]